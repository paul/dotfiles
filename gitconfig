[include]
  # secrets
  path = ~/.gitconfig.local
[core]
  editor = /usr/bin/vim
  excludesfile = /Users/rando/.gitignore_global
[merge]
  tool = opendiff
[branch]
  mergeoptions = no-ff
  autosetupmerge = always
  autosetuprebase = always
[pull]
  rebase = true
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto
[rebase]
  autoSquash = true
  autoStash = true
[alias]
  b     = branch
  p     = pull
  co    = checkout
  ci    = commit -a
  lol   = log --pretty=oneline --abbrev-commit --graph --decorate
  c     = commit -m
  a     = add
  st    = status
  graph = log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date = relative

  lg    = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit

  addw  = "!git diff -w --no-color | git apply --cached --ignore-whitespace"

  pr = pull-request

  #
  # Working with branches
  #

  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"
  # Push the current branch to the remote "origin", and set it to track
  # the upstream branch
  publish = "!git push -u origin $(git branch-name):$(git branch-name)"
  # Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"
  # Delete a branch and recreate it from master â€” useful if you have, say,
  # a development branch and a master branch and they could conceivably go
  # out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

  # Fire up your difftool (e.g. Kaleidescope) with all the changes that
  # are on the current branch.
  code-review = difftool origin/master...

  # Given a merge commit, find the span of commits that exist(ed) on that
  # branch. Again, not so useful in itself, but used by other aliases.
  merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

  # Find the commits that were introduced by a merge
  merge-log = "!git log `git merge-span .. $1`"
  # Show the changes that were introduced by a merge
  merge-diff = "!git diff `git merge-span ... $1`"
  # As above, but in your difftool
  merge-difftool = "!git difftool `git merge-span ... $1`"

  # Interactively rebase all the commits on the current branch
  rebase-branch = "!git rebase -i `git merge-base master HEAD`"

  #
  # Working with files
  #

  # Unstage any files that have been added to the staging area
  unstage = reset HEAD
  # Show changes that have been staged
  diffc = diff --cached

  # Mark a file as "assume unchanged", which means that Git will treat it
  # as though there are no changes to it even if there are. Useful for
  # temporary changes to tracked files
  assume = update-index --assume-unchanged
  # Reverse the above
  unassume = update-index --no-assume-unchanged
  # Show the files that are currently assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"

  # Checkout our version of a file and add it
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  # Checkout their version of a file and add it
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

  # Delete any branches that have been merged into current branch
  # See also: https://gist.github.com/robmiller/5133264
  cleanup-branches = "!git branch --merged | grep -v '\\*' | xargs git branch -d"

[format]
  pretty = %C(magenta reverse)%h%Creset %Cgreen[%cr]%Creset (%an) %s
[diff]
  # For Github-style word diffs
  wordRegex = [^[:space:]]
[status]
  submodulesummary = true
[apply]
  whitespace = fix
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[format]
  pretty = %Cblue%h%Creset %Cgreen[%cr]%Creset (%an) %s
[push]
  default = simple
[sendemail]
  smtpserver = smtp.gmail.com
  smtpserverport = 587
  smtpencryption = tls
  smtpuser = psadauskas@gmail.com
[credential]
  helper = osxkeychain
[hub]
  protocol = https
[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path =
[mergetool "sourcetree"]
  cmd = /opt/homebrew-cask/Caskroom/sourcetree/2.2.4/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true
[user]
  name = Paul Sadauskas
  email = psadauskas@gmail.com
[filter "lfs"]
  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true
