[include]
  # secrets
  path = ~/.gitconfig.local

[core]
  editor = nvim
  excludesfile = ~/.gitignore.global
  attributesfile = ~/.gitattributes
  pager = less --tabs=4 -RFX
  askpass = /usr/bin/ksshaskpass

[user]
  name = Paul Sadauskas
  email = psadauskas@gmail.com
	signingkey = 02DF4AA81F43CF58
[credential]
	; helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
  helper = /usr/libexec/git-core/git-credential-libsecret
[credential "https://github.com"]
  username = paul

# UI
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[format]
  ; pretty = %C(magenta reverse)%h%Creset %Cgreen[%cr]%Creset (%an) %s
  pretty = %Cblue%h%Creset %Cgreen[%cr]%Creset (%an) %s
[help]
  autocorrect = prompt

# Commands default options
[apply]
  whitespace = fix
[blame]
  ignoreRevsFile = .git-blame-ignore-revs
[branch]
  sort = -committerdate
  mergeoptions = no-ff
  autosetupmerge = always
  autosetuprebase = always
[checkout]
  defaultRemote = origin
[commit]
	gpgsign = true
  verbose = true
[diff]
  wordRegex = [^[:space:]] # For Github-style word diffs
  algorithm = patience     # combine "functions" together in diff
  colorMoved = plain
  mnemonicPrefix = true
  renames = true
	; tool = nvimdiff
  ; tool = difftastic
  ; external = difft
[fetch]
	prune = true
  pruneTags = true
  all = true
[init]
	defaultBranch = main
[merge]
  tool = kdiff3
  conflictstyle = zdiff3 # show original content before conflicts
[pull]
  rebase = true
[push]
  default = simple
  autoSetupRemote = true
  followTags = true
[rebase]
  autoSquash = true
  autoStash = true
  updateRefs = true
[status]
  submodulesummary = true
[tag]
  sort = version:refname

# Plugins/Addons
[hub]
	protocol = https
[filter "lfs"]
  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true
[rerere]
	enabled = true
	autoUpdate = true
[gpg]
  program = gpg2 ; fedora
  ; program = gpg  ; ubuntu
[pager]
  difftool = true

[difftool]
  prompt = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[difftool "nvimdiff"]
  cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[difftool "difftastic"]
  cmd = difft "$LOCAL" "$REMOTE"

[alias]
  b     = branch
  p     = pull
  co    = checkout
  ci    = commit -a
  a     = add
  st    = status -sb
  dft   = difftool

  lg    = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
  lol   = log --pretty=oneline --abbrev-commit --graph --decorate
  graph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

  # List unpushed commits
  out   = "log @{u}.."

  addw  = "!git diff -w --no-color | git apply --cached --ignore-whitespace"

  prc = "!hub -c core.commentChar='%' pull-request"

  pf = push --force-with-lease

  # Branch List with age and details
  bl = "!git for-each-ref --sort=-committerdate refs/heads \
    --format='%(color:green)%(committerdate:relative)|%(HEAD)%(color:yellow)%(refname:short)|%(color:magenta)%(authorname)%(color:reset)|%(subject)' \
    --color=always \
    | column -ts'|' -T4 -c$(($(tput cols) + 30))"

  # commiting
  c     = commit -m
  ca    = commit --amend
  cf    = commit --fixup
  # make a fixup commit for the last time the file was modified
  cff   = "!f() { [ -n $@ ] && git add $@ && git commit --fixup $(git last-sha $@); }; f"

  # rebasing
  rb = rebase
  rbm = "!git rebase --interactive $(git default-branch)"
  rbi = rebase --interactive
  rbc = rebase --continue
  rba = rebase --abort
  # Rebase commits on current branch, without adding in new commits from master
  rbb = "!git rebase -i `git merge-base $(git default-branch) HEAD`"

  # worktree
  wt = worktree

  #
  # Working with branches
  #

  # Get latest sha for file(s)
  last-sha = log -n1 --pretty=format:%h --grep 'fixup!' --invert-grep
  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"
  # Push the current branch to the remote "origin", and set it to track
  # the upstream branch
  publish = "!git push -u origin $(git branch-name):$(git branch-name)"
  # Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"
  # Delete a branch and recreate it from master â€” useful if you have, say,
  # a development branch and a master branch and they could conceivably go
  # out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

  # Default "upstream" branch name (master, main, staging, etc...)
	default-branch = !git symbolic-ref refs/remotes/origin/HEAD | cut -d/ -f4

  # Fire up your difftool (e.g. Kaleidescope) with all the changes that
  # are on the current branch.
  code-review = difftool origin/master...

  # Given a merge commit, find the span of commits that exist(ed) on that
  # branch. Again, not so useful in itself, but used by other aliases.
  merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

  # Find the commits that were introduced by a merge
  merge-log = "!git log `git merge-span .. $1`"
  # Show the changes that were introduced by a merge
  merge-diff = "!git diff `git merge-span ... $1`"
  # As above, but in your difftool
  merge-difftool = "!git difftool `git merge-span ... $1`"


  #
  # Working with files
  #

  # Unstage any files that have been added to the staging area
  unstage = reset HEAD
  # Show changes that have been staged
  diffc = diff --cached

  # Mark a file as "assume unchanged", which means that Git will treat it
  # as though there are no changes to it even if there are. Useful for
  # temporary changes to tracked files
  assume = update-index --assume-unchanged
  # Reverse the above
  unassume = update-index --no-assume-unchanged
  # Show the files that are currently assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"

  # Checkout our version of a file and add it
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  # Checkout their version of a file and add it
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

  # Delete any branches that have been merged into current branch
  # See also: https://gist.github.com/robmiller/5133264
  cleanup-branches = "!git branch --merged | grep -v '\\*' | grep -v '\\+' | xargs git branch -d"

